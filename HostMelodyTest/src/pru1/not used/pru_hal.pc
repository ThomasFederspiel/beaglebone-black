#include <stdint.h>


__asm__ __volatile__
(
 "CSTACK_PTR .set r2\n"
 // "CRETURN_PTR .set r3.w2\n"
 //
 // PRU Control Registers
 //
 "PRUSS_PRU0_CTRL .set 0x22000\n"
 "PRUSS_PRU1_CTRL .set 0x24000\n"
 //
 // PRU Control Register Offsets
 //
 "PRUSS_PRU_CTRL_OFFSET_CTPPR0 .set 0x28\n"
 "PRUSS_PRU_CTRL_OFFSET_CTPPR1 .set 0x2C\n"
 //
 // PRU Config Register
 //
 "PRU_ICSS_CFG_REG .set C4\n"
 //
 // PRU Config Register Offsets
 //
 "PRU_ICSS_CFG_OFFSET_SYSCFG .set 0x04\n"
 //
 // SYSCFG Bit Offsets
 //
 "SYSCFG_BIT_STANDBY_INIT .set 4\n"
 //
 // Constant Table Pointer Entries
 //
 "CTPE_C28 .set C28\n"
 // 
 // C28 (CTPPR0) Pointers
 //
 "C28_PTR_PRU_LOCAL_RAM .set 0x000\n"
 "C28_PTR_PRU_OTHER_RAM .set 0x020\n"
 "C28_PTR_SHARED_RAM .set 0x100\n"
);

void ocp_init(void)
{
  /* enable ocp wide access */

  __asm__ __volatile__
  (
   " LBCO &r0, PRU_ICSS_CFG_REG, PRU_ICSS_CFG_OFFSET_SYSCFG, 4 \n"
   " CLR r0, r0, SYSCFG_BIT_STANDBY_INIT \n"
   " SBCO &r0, PRU_ICSS_CFG_REG, PRU_ICSS_CFG_OFFSET_SYSCFG, 4 \n"
  );
}

void shm_init(void)
{
  /* configure the programmable pointer register for */
  /* PRU0 by setting c28_pointer[15:0] field to 0x0120 */
  /* this will make C28 point to 0x00012000 (PRU shared RAM). */

  /* save r4, r5 */
  __asm__ __volatile__
  (
   " SUB CSTACK_PTR, CSTACK_PTR, 8 \n"
   " SBBO &r4, CSTACK_PTR, 0, 8 \n"
  );

  __asm__ __volatile__
  (
   " LDI32 r4, C28_PTR_SHARED_RAM + 0x020 \n"
   " LDI32 r5, PRUSS_PRU0_CTRL + PRUSS_PRU_CTRL_OFFSET_CTPPR0 ; 0x22028 \n"
   " SBBO &r4, r5, 0x00, 4 \n"
  );

  /* restore r4, r5 */
  __asm__ __volatile__
  (
   " LBBO &r4, CSTACK_PTR, 0, 8 \n"
   " ADD CSTACK_PTR, CSTACK_PTR, 8 \n"
  );
}

void shm_write_uint32(register uint32_t i, register uint32_t x)
{
  /* i => R14, x => R15 */
  /* i is the absolute offset relative from shared memory start */
  /* write x at shm + i */

  __asm__ __volatile__
  (
   " SBCO &r15, CTPE_C28, r14.w0, 4 \n"
  );
}

void shm_write_float(register uint32_t i, register float x)
{
  /* i => R14, x => R15 */
  __asm__ __volatile__
  (
   " SBCO &r15, CTPE_C28, r14.w0, 4 \n"
  );
}

uint32_t shm_read(register uint32_t i)
{
  /* i => R14, return => R14 */
  	
  /* i is the absolute offset relative from shared memory start */
  /* read x at shm + i */

  __asm__ __volatile__
  (
   " LDI32 r0, C28_PTR_SHARED_RAM + 0x020 \n"
   " LDI32 r1, PRUSS_PRU0_CTRL + PRUSS_PRU_CTRL_OFFSET_CTPPR0 ; 0x22028 \n"
   " SBBO &r0, r1, 0, 4 \n"

   " LDI32 r0, 0x00100000 \n"
   " LDI32 r1, PRUSS_PRU0_CTRL + PRUSS_PRU_CTRL_OFFSET_CTPPR1 ; 0x2202c \n"
   " SBBO &r0, r1, 0, 4 \n"

   " LBCO &r14, C31, 0, 4 \n"
   " JMP r3.w2 \n"
  );

  /* unreached */
  return 0;
}

void adc_init(void)
{
}

uint16_t adc_read(register uint32_t x, register uint32_t y, register uint32_t z)
{
  /* must be compiled without optimizations */

  /* r2 used for the stack pointer, do not modify */
  /* r3 used for return address, do not modify */
  /* x=r14, y=r15, z=r16 registers used */
  /* r14 used for return values */

  __asm__ __volatile__
  (
   " JMP R3.w2 \n"
  );

  return 0;
}
