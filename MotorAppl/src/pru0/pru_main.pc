#include <stdint.h>
#include <stdbool.h>

#include "pru_core.hp"
#include "pru_iep.hp"
#include "pru_intc.hp"
#include "pru_ipc_dispatcher.hp"
#include "pru_gpio.hp"
#include "pru_epwm.hp"
#include "pru_ecap.hp"
#include "pru_eqep.hp"
#include "pru_memory_access.hp"
#include "pru_loop.hp"

#include "pru_ipc_devices.hp"
#include "pru_ipc_device_core.hp"
#include "pru_ipc_device_gpio.hp"
#include "pru_ipc_device_epwm.hp"
#include "pru_ipc_device_eqep.hp"
#include "pru_ipc_device_pwms.hp"
#include "pru_ipc_device_eqep_types.hp"
#include "pru_ipc_device_trace_types.hp"
#include "pru_config_types.hp"

#define LOOPS 	20

#define PRU_ARM_INTERRUPT_IPC PRU0_ARM_INTERRUPT_1
#define PRU_ARM_INTERRUPT_EVENT PRU0_ARM_INTERRUPT_2
#define ARM_PRU_INTERRUPT_IPC ARM_PRU0_INTERRUPT

#define ECAP_PWMSS_DEV	PWMSS_DEV_3
#define EPWM_PWMSS_DEV	PWMSS_DEV_1
#define RIGHT_MOTOR_EQEP_PWMSS_DEV	PWMSS_DEV_2
#define LEFT_MOTOR_EQEP_PWMSS_DEV   PWMSS_DEV_3

static uint32_t m_cnt1 = 0;
static uint32_t m_cnt2 = 0;
static uint32_t m_cnt3 = 0;
static uint32_t m_cnt4 = 0;
static uint32_t m_cnt5 = 0;
static uint32_t m_st1 = 0;
static uint32_t m_st2 = 0;
static uint32_t m_intrCnt = 0;

static void eQepInterrupt(const PwmssDeviceEnum pwmssDevice);
static void epwmInterrupt();
static void iepInterrupt();
static void ecapInterrupt();
static void ecapInternalInterrupt();
static void ecapCaptureInternalInterrupt();
static void pollPeripherals();
static void verifyInterrupts();

static const struct EQepInterruptHandlerSpec EQepInterruptTable[] =
{
        {
            eQepInterrupt,
            RIGHT_MOTOR_EQEP_PWMSS_DEV,
            EQEP_UTIME_INTR,
        }, 
		{
			eQepInterrupt,
			LEFT_MOTOR_EQEP_PWMSS_DEV,
			EQEP_UTIME_INTR,
		}, 
        {
            NULL, 0, 0
        }
};

static const struct InterruptHandlerSpec HostInterruptTable[] =
{
		{
			IPCBiDirectionalDispatcher,
			ARM_PRU_INTERRUPT_IPC,
			INTC_CHANNEL_0,
			SYS_EV_MASK(ARM_PRU_INTERRUPT_IPC),
			SYS_EV_REG_OFS(ARM_PRU_INTERRUPT_IPC)
		},
		{
//			iepInterrupt,
			processIepClockInterrupt,
			PR1_IEP_TIM_CAP_CMP_PEND,
			INTC_CHANNEL_0,
			SYS_EV_MASK(PR1_IEP_TIM_CAP_CMP_PEND),
			SYS_EV_REG_OFS(PR1_IEP_TIM_CAP_CMP_PEND)
		},
		{
			epwmInterrupt,
			EPWM0_INTR_INTR_PEND,
			INTC_CHANNEL_0,
			SYS_EV_MASK(EPWM0_INTR_INTR_PEND),
			SYS_EV_REG_OFS(EPWM0_INTR_INTR_PEND)
		},
		{
			ecapInterrupt,
			ECAP2_INTR_INTR_PEND,
			INTC_CHANNEL_0,
			SYS_EV_MASK(ECAP2_INTR_INTR_PEND),
			SYS_EV_REG_OFS(ECAP2_INTR_INTR_PEND)
		},
//		{
//		ecapInternalInterrupt,
//		PR1_ECAP_INTR_REQ,
//		INTC_CHANNEL_0,
//		SYS_EV_MASK(PR1_ECAP_INTR_REQ),
//		SYS_EV_REG_OFS(PR1_ECAP_INTR_REQ)
//		},
		{
			ecapCaptureInternalInterrupt,
			PR1_ECAP_INTR_REQ,
			INTC_CHANNEL_0,
			SYS_EV_MASK(PR1_ECAP_INTR_REQ),
			SYS_EV_REG_OFS(PR1_ECAP_INTR_REQ)
		},
		{
				NULL, 0, 0, 0, 0
		}
};

static const struct IPCHandlerSpec IPCHandlerTable[] =
{
	{
		IPCDeviceCore,
		deviceCoreIPCHandler
	},
	{
		IPCDeviceEPwm,
		deviceEPwmIPCHandler			
	},
	{
		IPCDevicePwms,
		devicePwmsIPCHandler			
	},
	{
		IPCDeviceGpio,
		deviceGpioIPCHandler
	},
    {
        IPCDeviceEQep,
        deviceEQepIPCHandler
    },
	{
		0,
		NULL
	}
};

static const LoopFunc pollFunctions[] = 
{
		pollPeripherals,
		pollHost0Interrupts,
		verifyInterrupts,
		IPCHostDirectionalDispatcher,
		NULL
};

static void pollPeripherals()
{
	pollECapInterrupt(ECAP_PWMSS_DEV);
	pollEPwmInterrupt(EPWM_PWMSS_DEV);
	pollEQepInterrupts();
}

static void verifyInterrupts()
{
	if (isECapInterruptActive_internal() && !isSystemEventInterruptActive(PR1_ECAP_INTR_REQ))
	{
		m_intrCnt++;
	}
	
//	if (isECapInterruptActive(ECAP_PWMSS_DEV) && !isSystemEventInterruptActive(ECAP2_INTR_INTR_PEND))
//	{
//		m_intrCnt++;
//	}
}

static void eQepInterrupt(const PwmssDeviceEnum pwmssDevice)
{
	struct IPCDeviceEQep_Status status =
	{
		{
			IPCDeviceEQep,
			IPCDeviceEQep_Status
		},

        pwmssDevice,
        {
            0,
            0
        },
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	};

    getIepClockTime(&status.pruClock.tick_ms, &status.pruClock.tick_ns);

	readEQepCaptures(pwmssDevice, &status.capCounter, &status.capTime, &status.capPeriod,
	   &status.unitTime_ms, &status.ueventPulses,  
	   &status.captureTimeTick_ns, &status.capStatus);

	status.counter = readEQepCounter(pwmssDevice);
	status.intrStatus = readEQepIntrFlag(pwmssDevice);

	sendIPCToHost(&status, sizeof(status));
}

static void trace()
{
    struct IPCDeviceTrace_Status trace =
    {
        {
            IPCDeviceTrace,
            IPCDeviceTrace_Status
        },
        {
            0
        }
    };
    
    trace.traceData[0] = 0x01;
    getEQepRegisterTrace(0x01, &trace.traceData[1]);
    
//    getPWMSSModuleRegisterTrace(0x01, &trace.traceData[1]);

    sendIPCToHost(&trace, sizeof(trace));
}

static void timerSlotCallback_10ms()
{
    struct IPCDeviceEQep_Odo odo =
    {
        {
            IPCDeviceEQep,
            IPCDeviceEQep_Odo
        },
        {
            0,
            0
        },

        RIGHT_MOTOR_EQEP_PWMSS_DEV,
        0,
        LEFT_MOTOR_EQEP_PWMSS_DEV,
        0
    };

    getIepClockTime(&odo.pruClock.tick_ms, &odo.pruClock.tick_ns);
    
    odo.counter_1 = readEQepCounter(odo.pwmssDevice_1);
    odo.counter_2 = readEQepCounter(odo.pwmssDevice_2);

    sendIPCToHost(&odo, sizeof(odo));
}

static void iepInterrupt()
{
	acknowledgeIepTimer();

// ;+	toggleGpio(PRU1_FW_GPIO_xx_P8_28_OUT);
//	toggleGpio(PRU1_FW_GPIO_xx_P8_29_OUT);
}

static void epwmInterrupt() 
{
	acknowledgeEPwmETInterrut(EPWM_PWMSS_DEV);

	m_cnt2 += 1;
}

static void ecapInterrupt()
{
	const uint16_t mask = acknowledgeECapPWMInterrut(ECAP_PWMSS_DEV);

	if (mask & ECAP_PWM_INT_SEL_CMP)
	{
		m_cnt3 += 1;
	}
}

static void ecapInternalInterrupt()
{
	const uint16_t mask = acknowledgeECapPWMInterrut_internal();
	
	if (mask & ECAP_PWM_INT_SEL_CMP)
	{
		m_cnt4 += 1;
	}
}

static void ecapCaptureInternalInterrupt()
{
	pollOneShotCapturePeriod_internal(&m_cnt4);
	
	m_cnt5++;
}

static void manageECapPwm(const bool enable)
{
	if (enable)
	{
		const uint32_t ecapPeriod = armECapPWMFreq(ECAP_PWMSS_DEV, ECAP_PWM_FREQ_1HZ);
		setECapPWMDuty(ECAP_PWMSS_DEV, ecapPeriod >> 1);
		enableECapPWMInterrupt(ECAP_PWMSS_DEV, ECAP_PWM_INT_SEL_CMP | ECAP_PWM_INT_SEL_PRD);
		enableECapClock(ECAP_PWMSS_DEV, true);
		enableECapPWM(ECAP_PWMSS_DEV);
	}
	else
	{
		disableECapPWMInterrupt(ECAP_PWMSS_DEV, ECAP_PWM_INT_SEL_CMP);
		disableECapPWM(ECAP_PWMSS_DEV, false);
		enableECapClock(ECAP_PWMSS_DEV, false);
	}
}

static void manageEQep(const PwmssDeviceEnum pwmssDevice, const bool enable)
{
	if (enable)
	{
        setEQepInterrupts(EQepInterruptTable);
        
        disableEQep(pwmssDevice);
	}
	else
	{
		disableEQep(pwmssDevice);
	}
}

static void manageEPwm(const bool enable)
{
	if (enable)
	{
		enableEPwmClock(EPWM_PWMSS_DEV, true);
		
//		const uint16_t pwmPeriod = armEPwmFreq(EPWM_PWMSS_DEV, PWM_FREQ_2HZ);
		const uint16_t pwmPeriod = armEPwmRawFreq(EPWM_PWMSS_DEV, EPWM_PER_CNT_HZ(2));
// 		const uint16_t pwmPeriod = armEPwmRawFreq(EPWM_PWMSS_DEV, PWM_FREQ_25KHZ);
	
		setEPwmDuty(EPWM_PWMSS_DEV, PWM_CH_A, pwmPeriod >> 1);
		enableEPwmETInterrupt(EPWM_PWMSS_DEV, PWM_INT_SEL_CH_A_INC);
		enableEPwm(EPWM_PWMSS_DEV, PWM_CH_A);
	}
	else
	{
		disableEPwmETInterrupt(EPWM_PWMSS_DEV);
		disableEPwm(EPWM_PWMSS_DEV, PWM_CH_A, false);
		enableEPwmClock(EPWM_PWMSS_DEV, false);
	}
}

static void manageECapPwm_internal(const bool enable)
{
	if (enable)
	{
		const uint32_t ecapPeriod = armECapPWMFreq_internal(ECAP_PWM_FREQ_1HZ);
		setECapPWMDuty_internal(ecapPeriod >> 1);
		enableECapPWMInterrupt_internal(ECAP_PWM_INT_SEL_CMP | ECAP_PWM_INT_SEL_PRD);
		enableECapPWM_internal(true);
	}
	else
	{
		disableECapPWMInterrupt_internal(ECAP_PWM_INT_SEL_CMP);
		enableECapPWM_internal(false);
	}
}

static void manageECapCapture_internal(const bool enable)
{
	if (enable)
	{
		armECapCapture_internal(ECAP_DELTA_PERIOD_CAPTURE, true);
//		enableECapCapture_internal(ECAP_CAPTURE_POLL);
		enableECapCapture_internal(ECAP_CAPTURE_PERIOD_INTR);
	}
	else
	{
		disableECapCapture_internal(false);
	}
}

int main(void)
{
	  initOCP();

	  initCTMemoryPtr();

	  initIPCBiDirectionalDispatcher(IPCHandlerTable, PRU_ARM_INTERRUPT_IPC);
	  initIPCHostDirectionalDispatcher(PRU_ARM_INTERRUPT_EVENT);
	  
	  enableHost0Interrupts(HostInterruptTable);

	  enableGlobalInterrupt(true);  

      // PWMSS registers can't be written until clock has been enabled
      enablePWMSSModule(PWMSS_DEV_1, true);
      enablePWMSSModule(PWMSS_DEV_2, true);
      enablePWMSSModule(PWMSS_DEV_3, true);

//	  setupIepTimer(IEP_DEFAULT_INC_USEC(1000000), IEP_CMP_COUNT_USEC(1000000));
//      setupIepTimer(IEP_DEFAULT_INC_USEC(1000), IEP_CMP_COUNT_USEC(1000));
//	  enableIepTimer(true);

      setTimerSlotCallback(IEP_TIME_SLOT_10_MS, timerSlotCallback_10ms);
      setupIepClock();
      startIepClock();

//	  setGpio(PRU0_FW_GPIO_xx_P8_12_OUT);
	  
//	  manageECapPwm(true);
//	  manageECapPwm_internal(true);
//	  manageECapCapture_internal(true);
//	  manageEPwm(true);

	  manageEQep(RIGHT_MOTOR_EQEP_PWMSS_DEV, true);
      manageEQep(LEFT_MOTOR_EQEP_PWMSS_DEV, true);

	  loopExecute(pollFunctions);

      manageEQep(LEFT_MOTOR_EQEP_PWMSS_DEV, false);
	  manageEQep(RIGHT_MOTOR_EQEP_PWMSS_DEV, false);
	  
//	  manageEPwm(false);
//	  manageECapCapture_internal(false);
//    manageECapPwm_internal(false);
//	  manageECapPwm(false);

//	  enableIepTimer(false);
    
      stopIepClock();
      setTimerSlotCallback(IEP_TIME_SLOT_10_MS, NULL );
	  
      enablePWMSSModule(PWMSS_DEV_3, false);
      enablePWMSSModule(PWMSS_DEV_2, false);
      enablePWMSSModule(PWMSS_DEV_1, false);
      
	  __delay_cycles(200000000);
	  fireArmInterrupt(PRU_ARM_INTERRUPT_IPC);
	  __delay_cycles(100000000);
	
	  enableGlobalInterrupt(false);  
	  
	  disableHostInterrupts();
	  
	  __halt();

	  return 0;
}
