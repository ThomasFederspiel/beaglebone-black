/*
 * pru_ecap.hp
 *
 *  Created on: 25 dec 2015
 *      Author: Thomas
 */

#ifndef PRU_ECAP_HP_
#define PRU_ECAP_HP_

#include <stdint.h>
#include <stdbool.h>

#include "pru_pwms.hp"
#include "pru_macros.hp"

typedef enum
{
	ECAP_PWM_FREQ_1HZ = 0,
	ECAP_PWM_FREQ_2HZ,
	ECAP_PWM_FREQ_10HZ,
	ECAP_PWM_FREQ_100HZ,
	ECAP_PWM_FREQ_25KHZ,
	LAST_ECAP_PWM_FREQ
} ECapPwmFreqEnum;

typedef enum
{
	ECAP_PWM_INT_SEL_CEVT1 = BIT(1),
	ECAP_PWM_INT_SEL_CEVT2 = BIT(2),
	ECAP_PWM_INT_SEL_CEVT3 = BIT(3),
	ECAP_PWM_INT_SEL_CEVT4 = BIT(4),
	ECAP_PWM_INT_SEL_OVF = BIT(5),
	ECAP_PWM_INT_SEL_PRD = BIT(6),
	ECAP_PWM_INT_SEL_CMP = BIT(7),
	ECAP_PWM_INT_SEL_ALL = ECAP_PWM_INT_SEL_CEVT1 | ECAP_PWM_INT_SEL_CEVT2 | ECAP_PWM_INT_SEL_CEVT3 
		| ECAP_PWM_INT_SEL_CEVT4 | ECAP_PWM_INT_SEL_OVF | ECAP_PWM_INT_SEL_PRD | ECAP_PWM_INT_SEL_CMP,
	LAST_ECAP_PWM_INT_SEL = 0x100
} ECapPwmIntSelEnum;

typedef enum
{
	ECAP_CAPTURE_PERIOD_INTR = 0,
	ECAP_CAPTURE_FULL_INTR,
	ECAP_CAPTURE_POLL
} ECapCaptureEnableEnum;

typedef enum
{
	ECAP_DELTA_PERIOD_CAPTURE = 0,
	ECAP_DELTA_FULL_CAPTURE
} ECapCaptureTypeEnum;

void enableECapClock(const PwmssDeviceEnum pwmssDevice, const bool enable);
uint32_t armECapPWMFreq(const PwmssDeviceEnum pwmssDevice, const ECapPwmFreqEnum freq);
bool armECapPWMRaw(const PwmssDeviceEnum pwmssDevice, const uint32_t freq);
void setECapPWMDuty(const PwmssDeviceEnum pwmssDevice, const uint32_t onTime);
void enableECapPWM(const PwmssDeviceEnum pwmssDevice);
void disableECapPWM(const PwmssDeviceEnum pwmssDevice, const bool outputHigh);
uint16_t acknowledgeECapPWMInterrut(const PwmssDeviceEnum pwmssDevice);
void enableECapPWMInterrupt(const PwmssDeviceEnum pwmssDevice, const uint8_t intSel);
void disableECapPWMInterrupt(const PwmssDeviceEnum pwmssDevice, const uint8_t intSel);
uint32_t getECapCounter(const PwmssDeviceEnum pwmssDevice);
void triggECapInterrupt(const PwmssDeviceEnum pwmssDevice, const uint8_t intSel);
bool armECapCapture(const PwmssDeviceEnum pwmssDevice, const ECapCaptureTypeEnum capType,
		const bool continouos);
void enableECapCapture(const PwmssDeviceEnum pwmssDevice, const ECapCaptureEnableEnum enable);
void disableECapCapture(const PwmssDeviceEnum pwmssDevice);
bool pollOneShotCaptureFull(const PwmssDeviceEnum pwmssDevice, uint32_t* highTime, uint32_t* periodTime);
bool pollOneShotCapturePeriod(const PwmssDeviceEnum pwmssDevice, uint32_t* periodTime);
bool isECapInterruptActive(const PwmssDeviceEnum pwmssDevice);

void armECapPWMRaw_internal(const uint32_t freq);
uint32_t armECapPWMFreq_internal(const ECapPwmFreqEnum freq);
void setECapPWMDuty_internal(const uint32_t onTime);
void enableECapPWM_internal();
void disableECapPWM_internal(const bool outputHigh);
void enableECapPWMInterrupt_internal(const uint8_t intSel);
void disableECapPWMInterrupt_internal(const uint8_t intSel);
uint16_t acknowledgeECapPWMInterrut_internal();
uint32_t getECapCounter_internal();
void triggECapInterrupt_internal(const uint8_t intSel);
bool armECapCapture_internal(const ECapCaptureTypeEnum capType,
		const bool continouos);
void enableECapCapture_internal(const ECapCaptureEnableEnum enable);
void disableECapCapture_internal();
bool pollOneShotCaptureFull_internal(uint32_t* highTime, uint32_t* periodTime);
bool pollOneShotCapturePeriod_internal(uint32_t* periodTime);
bool isECapInterruptActive_internal();

void pollECapInterrupt(const PwmssDeviceEnum pwmssDevice);

uint32_t getECapTmp(const PwmssDeviceEnum pwmssDevice, const uint8_t i);

#endif /* PRU_ECAP_HP_ */
