/*
 * pru_eqep.pc
 *
 *  Created on: 25 dec 2015
 *      Author: Thomas
 */

#include "pru_eqep.hp"
 
#include <limits.h>
#include <stddef.h>

#include "pru_pwms_core.hp"

static const struct EQepInterruptHandlerSpec* m_eQepInterruptTable = NULL;
static uint16_t m_unitTime_ms = 0;
static uint16_t m_ueventPulses = 0;
static uint16_t m_captureTimeTick_ns = 0;

static void setEQepCounterMode(volatile pruEQep* const eQep, const EQepCounterModeEnum mode)
{
	eQep->QDECCTL_QEPCTL.QDECCTL = 0;
	eQep->QDECCTL_QEPCTL.QDECCTL |= mode; 
}

static void disableEQepInterrupts()
{
	const struct EQepInterruptHandlerSpec* interruptTable = m_eQepInterruptTable;
	
	if (interruptTable)
	{
 		while (interruptTable->intrCallback != NULL)
		{
 			volatile pruEQep* const eQep = &pwmsRegisterBase[interruptTable->pwmssDevice].module->eQep;
 			
 			eQep->QEINT_QFLG.QEINT &= ~interruptTable->intrFlags;
			eQep->QCLR_QFRC.QCLR = interruptTable->intrFlags | EQEP_GLOBAL_INTR;
			
			interruptTable++;
		}
	}
}

static void enableEQepInterrupts()
{
	const struct EQepInterruptHandlerSpec* interruptTable = m_eQepInterruptTable;
	
	if (interruptTable)
	{
		while (interruptTable->intrCallback != NULL)
		{
			volatile pruEQep* const eQep = &pwmsRegisterBase[interruptTable->pwmssDevice].module->eQep;
			
			eQep->QCLR_QFRC.QCLR = interruptTable->intrFlags | EQEP_GLOBAL_INTR;
			eQep->QEINT_QFLG.QEINT |= interruptTable->intrFlags;
			
			interruptTable++;
		}
	}
}

void disableEQep(const PwmssDeviceEnum pwmssDevice)
{
	volatile pruEQep* const eQep = &pwmsRegisterBase[pwmssDevice].module->eQep;
	
	/* Disable unit timer */
	eQep->QDECCTL_QEPCTL.QEPCTL &= ~QEP_UTIME;
	
	/* Disable EQEP Capture */
	eQep->QCAPCTL_QPOSCTL.QCAPCTL &= ~QCAP_CAPTURE_EN;
	
	// Disable all interrupts
	eQep->QEINT_QFLG.QEINT &= ~EQEP_ALL_INTR;
	
	disableEQepInterrupts();
}

void enableEQepQuadrature(const PwmssDeviceEnum pwmssDevice, const EQepUnitTimerPeriod utimerPeriod,
		const EQepCapClkDivisor capClkDivisor, const EQepUpEventDivisor upEventDivisor,
		const uint16_t unitTime_ms, const uint16_t ueventPulses, const uint16_t captureTimeTick_ns)
{
	volatile pruEQep* const eQep = &pwmsRegisterBase[pwmssDevice].module->eQep;

	m_unitTime_ms = unitTime_ms;
	m_ueventPulses = ueventPulses;
	m_captureTimeTick_ns = captureTimeTick_ns;
	
	setEQepCounterMode(eQep, EQEP_QUADRATURE_MODE);
	
	/* Enable unit timer
	 * Enable capture latch on unit time out
	 * Enable quadrature position counter
	 * Enable software loading of position counter
	 * Reset position counter on unit time event to gauge RPM
	 */
	eQep->QDECCTL_QEPCTL.QEPCTL = QDE_PCRM_MAX | QEP_SWI | QEP_PHEN | QEP_QCLM | QEP_UTIME;
	
	/* Disable EQEP Capture */
	eQep->QCAPCTL_QPOSCTL.QCAPCTL &= ~QCAP_CAPTURE_EN;
	
	/* Set prescalers for EQEP Capture timer and UPEVNT */
	/* Note: EQEP Capture unit must be disabled before changing prescalar */
	
	// Setup for Low Speed Calculation
	//
	// capClkDivisor - specifies the divisor used for down sampling the sys clock (100 Mhz)
	//				   as to measure the time (max 65535 ticks) it takes to count
	//				   number of quadrature flanks as defined by upEventDivisor
	// upEventDivisor - specifies number of quadrature flanks needed for capture to occur
	//					DIV_4/8/16/32... and above specifes number of whole quadrature periods
	//					1/2/4/8 between captures
	eQep->QCAPCTL_QPOSCTL.QCAPCTL = capClkDivisor | upEventDivisor;
	
	/* Enable EQEP Capture */
	eQep->QCAPCTL_QPOSCTL.QCAPCTL |= QCAP_CAPTURE_EN;

	/* Clear encoder count */
	eQep->QPOSCNT = 0x00000000;
	
	/* Set max encoder count */
	eQep->QPOSMAX = UINT_MAX;

	/* Clear timer */
	eQep->QUTMR = 0x00000000;

	// Setup for High Speed Calculation
	//
	/* Set unit timer period count */
	eQep->QUPRD = utimerPeriod;

	/* Clear all interrupt bits */
	eQep->QCLR_QFRC.QCLR = EQEP_ALL_INTR;
	
	enableEQepInterrupts();
}

uint32_t readEQepCounter(const PwmssDeviceEnum pwmssDevice)
{
	volatile pruEQep* const eQep = &pwmsRegisterBase[pwmssDevice].module->eQep;
	
	return eQep->QPOSCNT;
}	

uint32_t readEQepStatus(const PwmssDeviceEnum pwmssDevice)
{
	volatile pruEQep* const eQep = &pwmsRegisterBase[pwmssDevice].module->eQep;
	
	const uint32_t status = eQep->QEPSTS_QCTMR.QEPSTS;
	
	eQep->QEPSTS_QCTMR.QEPSTS = EQEP_STS_ALL;
	
	return status;
}	

uint32_t readEQepIntrFlag(const PwmssDeviceEnum pwmssDevice)
{
	volatile pruEQep* const eQep = &pwmsRegisterBase[pwmssDevice].module->eQep;
	
	return eQep->QEINT_QFLG.QFLG;
}	

void clearEQepIntrFlag(const PwmssDeviceEnum pwmssDevice, const uint16_t flags)
{
	volatile pruEQep* const eQep = &pwmsRegisterBase[pwmssDevice].module->eQep;
	
	eQep->QCLR_QFRC.QCLR = flags;
}	

void readEQepCaptures(const PwmssDeviceEnum pwmssDevice, uint32_t* const counter, uint32_t* const time, uint32_t* const period,
		uint16_t* const unitTime_ms, uint16_t* const ueventPulses, uint16_t* const captureTimeTick_ns, 
		uint32_t* const status)
{
	volatile pruEQep* const eQep = &pwmsRegisterBase[pwmssDevice].module->eQep;

	// Position counter value latched when unit time out has occured
	*counter = eQep->QPOSLAT;

	// Capture timer time when unit time out occured
	*time = eQep->QCTMRLAT;

	// ;+
	if (eQep->QEPSTS_QCTMR.QEPSTS & EQEP_STS_UNITEVENT_POSITION_FLAG)
	{
		// Time passed during a unit time out period defined by QCAP_UPEVNT_DIV value set in QCAPCTL 
		*period = eQep->QCPRDLAT;
	}
	else
	{
		*period = 0;
	}
	
	// Configuration data
	*unitTime_ms = m_unitTime_ms;
	*ueventPulses = m_ueventPulses;
	*captureTimeTick_ns = m_captureTimeTick_ns;
	
	*status = readEQepStatus(pwmssDevice);
}	

void setEQepInterrupts(const struct EQepInterruptHandlerSpec* interruptTable)
{
	m_eQepInterruptTable = interruptTable;
}

void pollEQepInterrupts()
{
	const struct EQepInterruptHandlerSpec* interruptTable = m_eQepInterruptTable;

	if (interruptTable)
	{
		while (interruptTable->intrCallback != NULL)
		{
			volatile pruEQep* const eQep = &pwmsRegisterBase[interruptTable->pwmssDevice].module->eQep;
			
			if ((eQep->QEINT_QFLG.QFLG & interruptTable->intrFlags) != 0)
			{
				interruptTable->intrCallback(interruptTable->pwmssDevice);
				
				eQep->QCLR_QFRC.QCLR = interruptTable->intrFlags | EQEP_GLOBAL_INTR;
			}
			
			interruptTable++;
		}
	}
}

