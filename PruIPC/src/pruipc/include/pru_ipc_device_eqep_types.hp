/*
 * pru_ipc_device_eqep_types.hp
 *
 *  Created on: 4 jan 2016
 *      Author: Thomas
 */

#ifndef PRU_IPC_DEVICE_EQEP_TYPES_HP_
#define PRU_IPC_DEVICE_EQEP_TYPES_HP_

#include <stdint.h>

#include "pru_ipc_types.hp"
#include "pru_pwms_types.hp"
#include "pru_eqep_types.hp"

enum IPCDeviceEQepIoctlEnum
{
	IPCDeviceEQep_Open = 0,
	IPCDeviceEQep_Close,
	IPCDeviceEQep_Status,
	IPCDeviceEQep_EnableQuadrature,
	IPCDeviceEQep_disable
};

struct __attribute__((__packed__)) IPCDeviceEQep_Close
{
	struct IPCDeviceIoctl device;
	uint16_t /* PwmssDeviceEnum */ pwmssDevice;
};

struct __attribute__((__packed__)) IPCDeviceEQep_Open
{
	struct IPCDeviceIoctl device;
	uint16_t /* PwmssDeviceEnum */ pwmssDevice;
};

struct __attribute__((__packed__)) IPCDeviceEQep_EnableQuadrature
{
	struct IPCDeviceIoctl device;
	uint16_t /* PwmssDeviceEnum */ pwmssDevice;
	uint32_t /* EQepUnitTimerPeriod */ utimerPeriod; 
	uint16_t /* EQepCapClkDivisor */ capClkDivisor; 
	uint16_t /* EQepUpEventDivisor */ upEventDivisor;
	uint16_t /* EQepCounterModeEnum */ mode;
	uint16_t unitTime_ms;
	uint16_t ueventPulses;
	uint16_t captureTimeTick_ns;
};

struct __attribute__((__packed__)) IPCDeviceEQep_disable
{
	struct IPCDeviceIoctl device;
	uint16_t /* PwmssDeviceEnum */ pwmssDevice;
};

struct __attribute__((__packed__)) IPCDeviceEQep_Status
{
	struct IPCDeviceIoctl device;
	uint16_t /* PwmssDeviceEnum */ pwmssDevice;
	
	// Position counter value latched when unit time out has occured
	uint32_t capCounter;
	
	// ;+
	uint32_t capTime;
	
	// Tick time in [ns], see EQepCapClkDivisor in pru_eqep_types.hp
	uint32_t capPeriod;
	
	uint32_t capStatus;
	
	uint32_t intrStatus;
	
	// Count of number of pulses
	uint32_t counter;
	
	uint16_t unitTime_ms;
	uint16_t ueventPulses;
	uint16_t captureTimeTick_ns;
};

#endif /* PRU_IPC_DEVICE_EQEP_TYPES_HP_ */
